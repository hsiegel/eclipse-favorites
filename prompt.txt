Nice, Holger. Hier ist ein **kompakt-aber-präziser Prompt** für deinen Codex-Run in einem leeren Verzeichnis. Copy-paste als `prompt.txt` – Codex soll daraus ein vollständiges, baubares Eclipse-Plugin erzeugen.

---

# prompt.txt (für gpt-5-codex jigh)

**Rolle & Ziel**
Du bist ein erfahrener Eclipse-RCP/Plug-in-Entwickler. Erzeuge in **diesem leeren Verzeichnis** ein fertiges Eclipse-Plug-in namens **“Favorites View”** (Bundle-ID `com.holgersiegel.favorites`). Das Plugin liefert eine View, in der ich Dateien/Ordner wie „angeheftet“ verwalten kann – **mit Drag\&Drop** rein (aus Package/Project Explorer und vom OS), Öffnen per Doppelklick, Entfernen, „Reveal in Package Explorer“, „Copy Path“, Persistenz über Neustarts und einen Command „Add current editor to Favorites“.
Zielplattform: aktuelle Eclipse IDE (4.28+). Java 17. Keine externen Libs.

---

## Anforderungen (funktional)

1. **View**

* Name: `Favorites` (ID `com.holgersiegel.favorites.views.FavoritesView`), Kategorie „General“.
* UI: `TreeViewer` (JFace), Mehrfachauswahl, Toolbar-Buttons (Add current editor, Remove), Kontextmenü (Open, Reveal in Package Explorer, Copy Path, Remove).
* Doppelklick öffnet Datei/Ordner:

  * Dateien → Default Editor
  * Ordner → im Package Explorer selektieren (reveal)
* **Drag\&Drop in die View**:

  * Unterstütze `ResourceTransfer`, `LocalSelectionTransfer` (aus Eclipse Explorer) und `FileTransfer` (vom OS).
  * Dedupliziere Einträge (Schlüssel: absoluter Pfad).
* **Drag nach außen (optional)**:

  * Wenn möglich, OS-Drag mit `FileTransfer` aus der View (nur für echte Pfade). Falls zu aufwendig → weglassen (MVP bleibt grün).

2. **Model & Persistenz**

* `FavoriteEntry` hält entweder `IResource` (Workspaceressource) **oder** externe Datei via `Path/URI`.
* Persistiere Liste beim Ändern & Shutdown in `IEclipsePreferences` (InstanceScope) als JSON (Pfad + Typ + optional Label/Order).
* Beim Laden: nicht mehr existierende Pfade markieren (graues, deaktiviertes Label + Tooltip „Missing“).

3. **Commands/Handler**

* `com.holgersiegel.favorites.commands.addCurrentEditor`

  * Action: aktuelle Editor-Ressource (oder Datei aus `IFileStoreEditorInput`) zu Favorites hinzufügen.
* `…removeSelected`, `…revealInPackageExplorer`, `…copyPath`, `…open`
* Binde Commands in die View-Toolbar und ins Kontextmenü ein.
* Keybinding für „Add current editor“: `M1+M2+F` (Ctrl+Alt+F auf Win/Linux, Cmd+Alt+F auf macOS).

4. **Synchronisation & Robustheit**

* `IResourceChangeListener`: aktualisiere Einträge bei Move/Rename/Delete.
* Label Provider zeigt Status („missing“) als Overlay.
* Reihenfolge per Drag\&Drop innerhalb der View änderbar (Reorder) und gespeichert.

5. **Kein Mylyn, keine Drittlibs** – nur `org.eclipse.ui`, `org.eclipse.jface`, `org.eclipse.core.runtime`, `org.eclipse.core.resources`.

---

## Projektstruktur (zu erzeugen)

```
com.holgersiegel.favorites/                (Plug-in)
  ├─ src/
  │   └─ com/holgersiegel/favorites/
  │       ├─ views/FavoritesView.java
  │       ├─ model/FavoriteEntry.java
  │       ├─ model/FavoritesStore.java
  │       ├─ dnd/FavoritesDropAdapter.java
  │       ├─ dnd/FavoritesDragSource.java   (optional)
  │       ├─ handlers/AddCurrentEditorHandler.java
  │       ├─ handlers/RemoveHandler.java
  │       ├─ handlers/OpenHandler.java
  │       ├─ handlers/RevealInExplorerHandler.java
  │       ├─ handlers/CopyPathHandler.java
  │       └─ util/Resources.java
  ├─ plugin.xml
  ├─ MANIFEST.MF
  ├─ build.properties
  └─ README.md

com.holgersiegel.favorites.feature/        (Feature)
  ├─ feature.xml
  └─ README.md

com.holgersiegel.favorites.updatesite/     (P2 Update Site)
  └─ (site artifacts via Tycho)

pom.xml                                    (Parent, Tycho Build)
```

---

## Build (Tycho, Maven)

* Erzeuge **Multi-Module** Maven/Tycho Build:

  * Parent `pom.xml` (packaging `pom`), Module: plugin, feature, updatesite.
  * Tycho 4.x (oder passende aktuelle Version zu 4.28+).
  * Target-Platform: nutze `org.eclipse.platform` passend; liefere `repositories` (p2: Latest Release).
* `mvn -V -U -e -B clean verify` baut Artefakte.
* Ergebnis: Update-Site im `…updatesite/target/repository/`.
* Zusätzlich: Hinweis für **PDE Export** als Fallback in README.

---

## plugin.xml – Extensions (bitte komplett verdrahten)

* `org.eclipse.ui.views` → View-Definition
* `org.eclipse.ui.commands`, `org.eclipse.ui.handlers`, `org.eclipse.ui.bindings`
* `org.eclipse.ui.menus` → Toolbar & Popup-Menüs (View-Scope)
* (keine Product/Launch-Configs nötig, nur Plugin)

---

## Implementierungsdetails

* **FavoritesView**

  * `TreeViewer` mit Content/Label Provider; Eingabe ist `ObservableList<FavoriteEntry>`.
  * `addDropSupport(DND.DROP_COPY | DND.DROP_LINK, new Transfer[]{ ResourceTransfer.getInstance(), FileTransfer.getInstance(), LocalSelectionTransfer.getTransfer() }, new FavoritesDropAdapter(...))`
  * Double-Click Listener → `OpenHandler` auf aktuelle Auswahl.
  * Toolbar: `AddCurrentEditor`, `Remove`.
  * Reorder: interne Move-Operation + persistierte Reihenfolge.

* **FavoritesDropAdapter**

  * Erkenne `IResource` via `LocalSelectionTransfer` oder `ResourceTransfer`.
  * Erkenne OS-Dateien via `FileTransfer` (String\[] Pfade).
  * Normalisiere zu absoluten Pfaden, dedupliziere, `FavoritesStore.addAll(...)`.

* **FavoritesStore**

  * Behalte `List<FavoriteEntry>` im Speicher.
  * Lade/Speichere JSON in `IEclipsePreferences` Node `com.holgersiegel.favorites`.
  * Biete `add`, `remove`, `move`, `list`, `exists` und `saveNow()` an.
  * Registriere `IResourceChangeListener` beim Workspace; update/markiere Entries.

* **FavoriteEntry**

  * Felder: `String absPath`, `boolean workspaceResource`, `String label` (optional), `Status status` (`OK`, `MISSING`).
  * Hilfen: `toIResource()` wenn `workspaceResource=true` (resolve via `ResourcesPlugin.getWorkspace().getRoot().findMember(IPath)`), sonst `Path.of(absPath)`.
  * `equals/hashCode` über `absPath`.

* **Handlers**

  * `AddCurrentEditorHandler`: ermittle `IEditorInput` → wenn `IFileEditorInput` dann `IResource`; sonst `IURIEditorInput` → Pfad; dann `FavoritesStore.add(...)`.
  * `OpenHandler`: Datei → `IDE.openEditor`; Ordner → `Package Explorer` reveal (`IWorkbenchPage#showView("org.eclipse.jdt.ui.PackageExplorer")`, dann `selectReveal`).
  * `RevealInExplorerHandler`: immer wie oben.
  * `CopyPathHandler`: absoluter Pfad in Clipboard (TextTransfer).
  * `RemoveHandler`: entfernt alle selektierten Einträge, speichert.

* **Labeling/Decorators**

  * LabelProvider: Icon je nach Typ (Datei/Ordner/extern), und graues Overlay bei `MISSING`.

---

## Qualität & Tests

* Baue das Projekt lokal (Maven).

* README:

  * **Installation**: Via „Install New Software…“ auf `…updatesite/target/repository`.
  * **Nutzung**: `Window → Show View → Other → General → Favorites`.
  * Drag\&Drop Beispiele, Shortcuts.
  * Troubleshooting (Rechte/Pfade, externe Dateien).

* Mini-Smoke-Test beschreiben:

  1. Datei aus Package Explorer in View ziehen → erscheint.
  2. Externe Datei aus OS reinziehen → erscheint.
  3. Doppelklick öffnet (Datei) / reveal (Ordner).
  4. Eclipse neu starten → Liste ist da.
  5. Datei löschen → Eintrag wird „missing“ markiert.

* `.gitignore` für Maven/target/IDE-Artefakte.

---

## Stil & Sauberkeit

* Sauberer, gut kommentierter Code.
* Keine toten Abhängigkeiten.
* Defensive Null-Checks.
* Kurze Methoden.
* Sinnvolle Paketstruktur (s.o.).
* Lizenzheader MIT (README & Quellcode).

---

## Abgabe

* Erzeuge alle Dateien im aktuellen Verzeichnis (Multi-Modul Maven Projekt).
* Zum Schluss: Kurze **HOWTO** oben in `README.md` (Build, Install, Use).
* Prüfe, dass `mvn clean verify` ohne Fehler läuft.

---

**Wichtig:** Wenn eine Anforderung (z. B. OS-Drag-out) in der Zielplattform zu heikel wird, beschreibe in der README kurz, warum es weggelassen wurde – aber stelle sicher, dass **Drag\&Drop hinein**, Öffnen, Reveal, Remove, Persistenz und Add-Current-Editor voll funktionieren.

---

((Ende des Prompts.))
